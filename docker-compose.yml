version: "3.8"

services:
  jenkins:
    image: jenkinsci/blueocean
    container_name: jenkins
    depends_on:
      - nexus
      - sonarqube
    environment:
      - DOCKER_HOST=tcp://localhost:2375
      - JENKINS_UC=http://updates.jenkins.io
      - JENKINS_UC_EXPERIMENTAL=http://updates.jenkins.io/experimental
      - JENKINS_INCREMENTALS_REPO_MIRROR=http://repo.jenkins-ci.org/incrementals
    user: root
    ports:
      - "8080:8080"
      - "8443:8443"
      - "50000:50000"
    expose:
      - "8080"
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-home:/home

  nexus:
    image: sonatype/nexus3
    container_name: nexus
    volumes:
      - "nexus-data:/nexus-data"
    ports:
      - "8081:8081"
    expose:
      - "8081"

  sonarqube:
    image: sonarqube
    container_name: sonarqube
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      - sonar.jdbc.url=jdbc:postgresql://db:5432/sonar
      - sonar.jdbc.username=sonar
      - sonar.jdbc.password=sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions

  db:
    image: postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
      - "./scripts/add-keycloak-db.sh:/docker-entrypoint-initdb.d/add-keycloak-db.sh"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: jboss/keycloak:11.0.3
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: "/tmp/karate-quarkus-demo-realm.json"
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      DB_VENDOR: postgres
      DB_ADDR: postgres
    ports:
      - 8180:8080
    volumes:
      - "./scripts/karate-quarkus-demo-realm.json:/tmp/karate-quarkus-demo-realm.json"
    depends_on:
      db:
        condition: service_healthy

  graphql-engine:
    image: hasura/graphql-engine:v2.0.0-beta.1
    ports:
      - "18080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - demo-network
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_JWT_SECRET: "{\"jwk_url\":\"http://keycloak:8080/auth/realms/hasura/protocol/openid-connect/certs\"}"

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411

  pub-sub-emulator:
    image: google/cloud-sdk:306.0.0
    command: [ "gcloud", "beta", "emulators", "pubsub", "start", "--host-port=0.0.0.0:8085", "--project=df-key-kls-npe-8d1f" ]
    ports:
      - "8085:8085"

  nifi:
    image: apache/nifi:1.12.1
    container_name: nifi
    ports:
      - 8080:8080
  #    environment:
  #      - NIFI_WEB_HTTP_PORT=8080
  #    links:
  #      - pub-sub-emulator
  #    volumes:
  #      - ./data:/opt/datafiles
  #      - ./config/nifi:/opt/nifi/nifi-current/conf
  #      - nifi:/opt/nifi/nifi-current/extensions

  scylla:
    image: scylladb/scylla:4.5
    command: "--smp 2"
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5
    mem_limit: 600m

  envoy:
    image: docker.io/envoyproxy/envoy-alpine:v1.18.3
    command: /usr/local/bin/envoy -c etc/envoy/bootstrap.yaml -l debug --service-cluster front --service-node front
    volumes:
      - './config/certs:/etc/certs:ro'
      - './config/base/envoy/config:/etc/envoy:ro'
    expose:
      - '9090'
      - '9443'
      - '9901'
    ports:
      - '9090:9090'
      - '9444:9443'
      - '9901:9901'


volumes:
  nexus-data: { }
  jenkins-data: { }
  jenkins-home: { }
  sonarqube_conf: { }
  sonarqube_data: { }
  sonarqube_extensions: { }
  postgresql: { }
  postgresql_data: { }
  nifi: { }
