[versions]

# kotlin
kotlin = "1.6.0"
spek = "2.0.11"
kotest = "5.0.3"
junit = "5.8.2"
serialization = "1.3.2"
avro4k = "1.5.0"
avro4kSerde = "0.13.0"
kaml = "0.17.0"
coroutines = "1.6.0"
metadata = "0.3.0"
turbine = "0.7.0"
ktlint = "0.43.2"
mockk = "1.12.1"
arrow = "0.10.5"
konfig = "1.1.2"
mapstruct = "1.4.2.Final"
markdown = "0.1.45"
javafaker = "1.0.2"
validation = "2.0.1.Final"
kotlinRetry = "1.0.9"

# gradle
gradleTool = "7.3.3"

# test matchers
hamcrest = "1.3"
restAssured = "4.4.0"

# Jacoco
jacoco = "0.8.7"

# logs
kotlinLogging = "2.1.21"
slf4j = { require = "2.0.0-alpha5" }
# slf4j = "1.7.31"

# quarkus
quarkusPluginId = "io.quarkus"
quarkusPluginVersion = "2.6.0.Final"
quarkusPlatformVersion = "2.6.0.Final"
quarkusPlatformGroupId = "io.quarkus"
quarkusPlatformArtifactId = "quarkus-universe-bom"

# for pre-released versions
#quarkusPluginId = "io.quarkus"
#quarkusPluginVersion = "2.2.1.CR1"
#quarkusPlatformVersion = "2.2.1.CR1"
#quarkusPlatformGroupId = "io.quarkus"
#quarkusPlatformArtifactId = "quarkus-bom"

# to use locally built Quarkus, use `quarkus-bom` and `999-SNAPSHOT`
#quarkusPlatformArtifactId = "quarkus-bom"
#quarkusPlatformVersion = "999-SNAPSHOT"

# grpc
grpc = "1.43.1"
grpcKotlin = "1.2.0"
protobuf = "3.19.1"
pgv = "0.6.2"
guava = "30.1-jre"
sentinel = "1.8.2"

# beam
beam = "2.34.0"
csv = "1.8"
openCsv = "5.0"
uuid = "4.0.1"
# yaml version
yaml = "2.10.3"
# avro version
avro = "1.11.0"

# spring
#spring = "2.5.3"
kotestSpring = "1.1.0"
springMockk = "3.1.0"
snakeyaml = "1.28"
springGrpc = "4.5.5"
springCloud = "2021.0.0"
springCloudGcp = "2.0.5"

# kafka
kafkaStreams = "3.0.0"
javaFaker = "1.0.2"
confluent ="7.0.1"

# google
googlePubsub = "1.115.0"
googleTink = "1.6.1"

# telemetry
otel = "1.5.0"
otel-alpha = "1.5.0-alpha"
otel-agent = "1.9.1"
micrometer = "1.8.1"

[libraries]
guava = { module = "com.google.guava:guava", version.ref = "guava" }
#commons-lang3 = { group = "org.apache.commons", name = "commons-lang3", version = { strictly = "[3.8,4.0[", prefer = "3.9" } }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpcKotlin" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpc-services = { module = "io.grpc:grpc-services", version.ref = "grpc" } # Optional. includes grpc-protobuf
grpc-xds = { module = "io.grpc:grpc-xds", version.ref = "grpc" } # Optional. includes grpc-services, grpc-auth,  grpc-alts
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-kotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobuf" }
sentinel-grpc-adapter = { module = "com.alibaba.csp:sentinel-grpc-adapter", version.ref = "sentinel" }
pgv-java-stub = { module = "io.envoyproxy.protoc-gen-validate:pgv-java-stub", version.ref = "pgv" }
#concurrency-limits-grpc = { module="com.netflix.concurrency-limits:concurrency-limits-grpc", version.ref="netflixConcurrency" }
javax-validation = { module = "javax.validation:validation-api", version.ref = "validation" }

# Kotlin dependencies
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlin-metadata = { module = "org.jetbrains.kotlinx:kotlinx-metadata-jvm", version.ref = "metadata" }
# Kotlin serialization dependencies
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
kotlinx-serialization-avro = { module = "com.github.avro-kotlin.avro4k:avro4k-core", version.ref = "avro4k" }
kotlinx-serialization-yaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }
kotlinx-serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "serialization" }
# Kotlin coroutines dependencies
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-jvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "coroutines" }
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "coroutines" }
kotlinx-coroutines-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "coroutines" } # for `Reactive Streams`
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "coroutines" } # for `Project Reactor`

# arrow dependencies
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-syntax = { module = "io.arrow-kt:arrow-syntax", version.ref = "arrow" }
arrow-fx = { module = "io.arrow-kt:arrow-fx", version.ref = "arrow" }

# spring dependencies
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-data-r2dbc = { module = "org.springframework.boot:spring-boot-starter-data-r2dbc" }
spring-boot-starter-rsocket = { module = "org.springframework.boot:spring-boot-starter-rsocket" }
spring-boot-reactor-kotlin-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions" }
# Usage: developmentOnly(libs.spring.boot.devtools)
spring-boot-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
spring-boot-starter-validation  = { module = "org.springframework.boot:spring-boot-starter-validation" }
# Usage: kapt(libs.spring.boot.configuration.processor)
spring-boot-configuration-processor  = { module = "org.springframework.boot:spring-boot-configuration-processor" }  # to validate auto-completion on configuration properties
# Usage: kapt(libs.spring.boot.autoconfigure.processor)
spring-boot-autoconfigure-processor  = { module = "org.springframework.boot:spring-boot-autoconfigure-processor" }
spring-boot-starter-grpc  = { module = "io.github.lognet:grpc-spring-boot-starter", version.ref = "springGrpc" }

# Usage: exclude `spring-boot-starter-logging` module when using `spring-boot-starter-log4j2`
# implementation(libs.spring.boot.starter.log4j2)
# modules {
#   module("org.springframework.boot:spring-boot-starter-logging") {
#     replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
#   }
# }
spring-boot-starter-log4j2  = { module = "org.springframework.boot:spring-boot-starter-log4j2" }

## Spring Cloud. Usage:
# implementation(enforcedPlatform(libs.spring.cloud.bom.get()))
spring-cloud-bom = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloud" }

## Spring Cloud GCP. Usage:
# implementation(enforcedPlatform(libs.spring.cloud.gcp.bom.get()))
# runtimeOnly(libs.bundles.spring.cloud.gcp.basic)
spring-cloud-gcp-bom = { module = "com.google.cloud:spring-cloud-gcp-dependencies", version.ref = "springCloudGcp" }
spring-cloud-gcp-starter-logging = { module = "com.google.cloud:spring-cloud-gcp-starter-logging" }
spring-cloud-gcp-starter-metrics = { module = "com.google.cloud:spring-cloud-gcp-starter-metrics" }
spring-cloud-gcp-starter-trace = { module = "com.google.cloud:spring-cloud-gcp-starter-trace" }
spring-cloud-gcp-logging = { module = "com.google.cloud:spring-cloud-gcp-logging" }

h2 = { module = "com.h2database:h2" }
r2dbc-h2 = { module = "io.r2dbc:r2dbc-h2" }
snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "snakeyaml" }
markdown = { module = "org.jetbrains:markdown", version.ref = "markdown" }
javafaker = { module = "com.github.javafaker:javafaker", version.ref = "javafaker" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }

# quarkus dependencies
quarkus-bom = { module = "io.quarkus:quarkus-bom", version.ref = "quarkusPlatformVersion" }

quarkus-kotlin = { module = "io.quarkus:quarkus-kotlin" }
quarkus-arc = { module = "io.quarkus:quarkus-arc" }
quarkus-config-yaml = { module = "io.quarkus:quarkus-config-yaml" }
quarkus-logging-slf4j = { module = "org.jboss.slf4j:slf4j-jboss-logmanager" }
quarkus-logging-json = { module = "io.quarkus:quarkus-logging-json" }

quarkus-resteasy-core = { module = "io.quarkus:quarkus-resteasy" }
quarkus-resteasy-jsonb = { module = "io.quarkus:quarkus-resteasy-jsonb" }

quarkus-oidc = { module = "io.quarkus:quarkus-oidc" }
quarkus-grpc = { module = "io.quarkus:quarkus-grpc" }

quarkus-jdbc-h2 = { module = "io.quarkus:quarkus-jdbc-h2" }
quarkus-hibernate-orm = { module = "io.quarkus:quarkus-hibernate-orm" }
quarkus-hibernate-validator = { module = "io.quarkus:quarkus-hibernate-validator" }

quarkus-smallrye-health = { module = "io.quarkus:quarkus-smallrye-health" }
quarkus-smallrye-metrics = { module = "io.quarkus:quarkus-smallrye-metrics" }
quarkus-smallrye-openapi = { module = "io.quarkus:quarkus-smallrye-openapi" }
quarkus-smallrye-graphql = { module = "io.quarkus:quarkus-smallrye-graphql" }

quarkus-container-image-jib = { module = "io.quarkus:quarkus-container-image-jib" }
quarkus-kubernetes = { module = "io.quarkus:quarkus-kubernetes" }
# https://smallrye.io/smallrye-mutiny/guides/kotlin
quarkus-mutiny-kotlin = { module = "io.smallrye.reactive:mutiny-kotlin" }

# mapstruct dependencies
# FIXME: https://github.com/quarkusio/quarkus/issues/14012
mapstruct-core = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct" }
# Usage: kapt(libs.mapstruct.processor)
mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct" }

# Logging dependencies
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
kotlin-logging = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlinLogging" }
slf4j-jdk14 = { module = "org.slf4j:slf4j-jdk14", version.ref = "slf4j" } # runtimeOnly
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" } # runtimeOnly

# Telemetry dependencies
opentelemetry-bom = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "otel" }
opentelemetry-bomAlpha = { module = "io.opentelemetry:opentelemetry-bom-alpha", version.ref = "otel-alpha" }

opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk" }

opentelemetry-api-metrics = { module = "io.opentelemetry:opentelemetry-api-metrics"}
opentelemetry-sdk-metrics = { module = "io.opentelemetry:opentelemetry-sdk-metrics"}

opentelemetry-javaagent = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent",  version.ref = "otel-agent"}

opentelemetry-extension-annotations = { module = "io.opentelemetry:opentelemetry-extension-annotations" }
opentelemetry-extension-kotlin = { module = "io.opentelemetry:opentelemetry-extension-kotlin" }

opentelemetry-spring-boot-autoconfigure = { module = "io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure"}
opentelemetry-sdk-extension-autoconfigure = { module = "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure"}

opentelemetry-exporter-logging = { module = "io.opentelemetry:opentelemetry-exporter-logging" }
opentelemetry-exporter-jaeger = { module = "io.opentelemetry:opentelemetry-exporter-jaeger" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
opentelemetry-exporter-prometheus = { module = "io.opentelemetry:opentelemetry-exporter-prometheus" }

opentelemetry-sdk-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing" }

micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }

# Testing dependencies
kotest-framework-engine-jvm = { module = "io.kotest:kotest-framework-engine-jvm", version.ref = "kotest" }
kotest-framework-api-jvm = { module = "io.kotest:kotest-framework-api-jvm", version.ref = "kotest" }
kotest-assertions-core-jvm = { module = "io.kotest:kotest-assertions-core-jvm", version.ref = "kotest" }
kotest-assertions-json-jvm = { module = "io.kotest:kotest-assertions-json-jvm", version.ref = "kotest" }
kotest-property-jvm = { module = "io.kotest:kotest-property-jvm", version.ref = "kotest" }
kotest-runner-junit5-jvm = { module = "io.kotest:kotest-runner-junit5-jvm", version.ref = "kotest" }
kotest-extensions-spring = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotestSpring" }

mockk-test = { module = "io.mockk:mockk", version.ref = "mockk" }
hamcrest-all-test = { module = "org.hamcrest:hamcrest-all", version.ref = "hamcrest" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
rest-assured-test = { module = "io.rest-assured:rest-assured", version.ref = "restAssured" }
rest-assured-kotlin-test = { module = "io.rest-assured:kotlin-extensions" }
quarkus-junit5-test = { module = "io.quarkus:quarkus-junit5" }
quarkus-jacoco-test = { module = "io.quarkus:quarkus-jacoco" }
grpc-test = { module = "io.grpc:grpc-testing", version.ref = "grpc" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-mockk-test = { module = "com.ninja-squad:springmockk", version.ref = "springMockk" }
spring-boot-reactor-test = { module = "io.projectreactor:reactor-test" }
turbine-test = { module = "app.cash.turbine:turbine", version.ref = "turbine" }

# beam dependencies
beam-sdks-java-core = { module = "org.apache.beam:beam-sdks-java-core", version.ref = "beam" }
beam-runners-direct-java = { module = "org.apache.beam:beam-runners-direct-java", version.ref = "beam" }
beam-runners-google-cloud-dataflow-java = { module = "org.apache.beam:beam-runners-google-cloud-dataflow-java", version.ref = "beam" }
beam-sdks-java-io-google-cloud-platform = { module = "org.apache.beam:beam-sdks-java-io-google-cloud-platform", version.ref = "beam" }
beam-sdks-java-extensions-kryo = { module = "org.apache.beam:beam-sdks-java-extensions-kryo", version.ref = "beam" }
beam-sdks-java-extensions-euphoria = { module = "org.apache.beam:beam-sdks-java-extensions-euphoria", version.ref = "beam" }
beam-sdks-java-extensions-json-jackson = { module = "org.apache.beam:beam-sdks-java-extensions-json-jackson", version.ref = "beam" }
beam-sdks-java-extensions-protobuf = { module = "org.apache.beam:beam-sdks-java-extensions-protobuf", version.ref = "beam" }

# konf dependencies
konf-core = { module = "com.uchuhimo:konf-core", version.ref = "konfig" }
konf-yaml = { module = "com.uchuhimo:konf-yaml", version.ref = "konfig" }

# google
google-cloud-pubsub = { module = "com.google.cloud:google-cloud-pubsub", version.ref = "googlePubsub" }

# Bundles of dependencies usually used together so they can be included in one go
[bundles]
#testDependencies = ["junit-jupiter", "junit-engine"]
grpc = ["grpc-kotlin-stub", "grpc-protobuf", "protobuf-java"]

logging-common = ["slf4j-api", "kotlin-logging"]
logging-runtime = ["slf4j-jdk14", "slf4j-simple"]

opentelemetry-api = ["opentelemetry-api", "opentelemetry-api-metrics"]
opentelemetry-sdk = ["opentelemetry-sdk", "opentelemetry-sdk-metrics"]
opentelemetry-test = ["opentelemetry-sdk", "opentelemetry-sdk-metrics", "opentelemetry-sdk-testing"]
opentelemetry-basic = [
    "opentelemetry-api",
    "opentelemetry-api-metrics",
    "opentelemetry-sdk",
    "opentelemetry-sdk-metrics",
    "opentelemetry-extension-annotations",
    "opentelemetry-extension-kotlin",
    "opentelemetry-exporter-logging",
    "opentelemetry-exporter-prometheus",
    "opentelemetry-spring-boot-autoconfigure"
]

testing-common = [
    "kotest-framework-engine-jvm",
    "kotest-framework-api-jvm",
    "kotest-assertions-core-jvm",
    "kotest-property-jvm",
    "mockk-test"
]

konf = ["konf-core", "konf-yaml"]

kotlinx-serialization-all = [
    "kotlinx-serialization-json",
    "kotlinx-serialization-protobuf",
    "kotlinx-serialization-avro"
]

kotlinx-coroutines = [
    "kotlinx-coroutines-core",
    "kotlinx-coroutines-jvm"
]

spring-basic = [
    "spring-boot-starter-webflux",
    # Spring Tools
    "spring-boot-starter-actuator",
    # Kotlin Serialization
    "kotlinx-serialization-json", # Don't include "jackson-module-kotlin" so that, it defaults to Kotlin serialization
    # Kotlin Coroutines
    "kotlinx-coroutines-core",
    "kotlinx-coroutines-jvm",
    "kotlinx-coroutines-reactor",
]

spring-grpc = [
    "grpc-kotlin-stub",
    "spring-boot-starter-grpc"
]

spring-cloud-gcp-basic = [
    "spring-cloud-gcp-starter-metrics",
    "spring-cloud-gcp-starter-logging"
]

arrow = [
    "arrow-core",
    "arrow-syntax",
    "arrow-fx"
]

beam = [
    "beam-sdks-java-core",
    "beam-runners-direct-java",
    "beam-runners-google-cloud-dataflow-java",
    "beam-sdks-java-io-google-cloud-platform",
]

quarkus-core = [
    "quarkus-kotlin",
    "quarkus-arc",
    "quarkus-config-yaml",
    "quarkus-logging-slf4j",
    "quarkus-logging-json"
]

quarkus-resteasy = [
    "quarkus-resteasy-core",
    "quarkus-resteasy-jsonb"
]

quarkus-hibernate = [
    "quarkus-jdbc-h2",
    "quarkus-hibernate-orm",
    "quarkus-hibernate-validator",
]

quarkus-tools = [
    "quarkus-smallrye-health",
    "quarkus-smallrye-metrics",
    "quarkus-smallrye-openapi",
]

quarkus-deployment = [
    "quarkus-container-image-jib",
    "quarkus-kubernetes"
]

mapstruct = ["mapstruct-core", "mapstruct-processor"]
